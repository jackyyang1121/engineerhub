專案根目錄 (engineerhub)
├── .git/
├── backend/                  # 後端服務 (Python - Django/Flask)
│   ├── apps/                 # 後端應用模組
│   │   ├── users/            # 用戶管理 (認證、個人資料等)
│   │   ├── posts/            # 貼文/動態功能
│   │   ├── portfolios/       # 作品集/專案展示
│   │   ├── private_messages/ # 私訊功能
│   │   ├── notifications/    # 通知系統
│   │   └── search/           # 搜尋功能
│   ├── config/               # 後端整體設定 (e.g., Django settings.py)
│   ├── manage.py             # Django 管理腳本 (若為 Django)
│   └── requirements.txt      # Python 依賴
├── frontend/                 # 前端應用 (React Native)
│   ├── android/
│   ├── ios/
│   ├── src/                  # 前端原始碼
│   │   ├── api/              # API 服務介面 (與後端通訊)
│   │   ├── assets/           # 靜態資源 (圖片, 字型)
│   │   ├── components/       # 可重用 UI 組件
│   │   ├── config.ts         # 前端配置文件
│   │   ├── context/          # React Context (e.g., AuthContext.tsx)
│   │   ├── navigation/       # 導航路由配置
│   │   ├── screens/          # 各個頁面/視圖組件
│   │   ├── styles/           # 全局或共享樣式
│   │   ├── theme.ts          # 主題配置文件 (顏色, 字型大小等)
│   │   ├── types/            # TypeScript 類型定義
│   │   ├── utils/            # 工具函數
│   │   └── App.tsx           # 應用程式進入點
│   ├── node_modules/
│   ├── package.json
│   └── ... (其他 React Native 設定檔)
├── node_modules/
├── .gitignore
├── docker-compose.yml        # Docker 容器編排
│                           # 可能包含:
│                           #   - frontend (服務靜態文件或開發伺服器)
│                           #   - backend (Python 應用服務)
│                           #   - database (e.g., PostgreSQL, MySQL)
│                           #   - (其他可能的服務如 Redis, Celery等)
├── package.json
├── README.md
└── requirements.txt
核心組件與交互：
frontend/src/App.tsx: 應用程式的根組件，設置全局提供者如 AuthProvider 和導航。
frontend/src/context/AuthContext.tsx: 管理用戶的登入狀態、Token 和用戶資訊。它會與 AsyncStorage 交互以持久化這些數據，並提供 login, logout, setToken, setUser 等方法。
frontend/src/navigation/: 處理應用程式內不同畫面 (screens) 之間的跳轉。
frontend/src/screens/: 包含各個獨立頁面的 UI 和邏輯，例如登入頁、主頁、個人資料頁等。這些頁面會使用 components 中的組件，並透過 api 與後端交互。
frontend/src/api/: 封裝了對後端 API 的請求，例如登入、獲取帖子、更新個人資料等。
backend/apps/*: 後端的各個功能模組。
users: 處理用戶註冊、登入、身份驗證、個人資料管理。
posts, portfolios: 處理核心內容的創建、讀取、更新、刪除 (CRUD)。
其他模組提供輔助功能。
docker-compose.yml: 將前端、後端以及可能的資料庫服務整合在一起，方便啟動和管理整個應用環境。